// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol", "metrics", "tracing", "extendedWhereUnique"]
    binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}
model User {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    nim          String   @unique
    passwordHash String
    role         UserRole @default(USER)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt
    version      Int      @default(0) // Comment this line if you don't want optimistic concurrency control
    isDeleted    Boolean  @default(false) // Comment this line if you don't want soft delete
}

model Example {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    version   Int      @default(0) // Comment this line if you don't want optimistic concurrency control
    isDeleted Boolean  @default(false) // Comment this line if you don't want soft delete
}

enum UserRole {
    ADMIN
    USER
}
model Student {
    student_id  String  @id @default(uuid())
    first_name  String
    last_name   String
    enrollments Enrollment[]
}

model Enrollment {
    enrollment_id        String   @id @default(uuid())
    date      DateTime @default(now())
    student   Student  @relation(fields: [student_id], references: [student_id])
    student_id String
    course    Course   @relation(fields: [course_id], references: [course_id])
    course_id String
}

model Course {
    course_id String   @id @default(uuid())
    name      String
    credits   Int
    enrollments Enrollment[]
}